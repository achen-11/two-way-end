generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:Achen,0701@127.0.0.1:3306/two_way_end"
}

// 专业
model Major {
  id               Int                @id @unique
  name             String
  college          String
  classes          Class[]
  CourseMaojrLimit CourseMaojrLimit[]

  @@map("major")
}

// 班级
model Class {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  major       Major     @relation(fields: [major_id], references: [id])
  major_id    Int
  enroll_year Int // 入学年份
  students    Student[]

  @@map("class")
}

// 学生
model Student {
  id             Int     @id @default(autoincrement())
  stu_id         String  @unique // 学号
  name           String
  sex            Int
  id_card        String // 身份证
  type           Int // 0-本科 1-专升本
  class_id       Int
  is_delay       Boolean // 是否延毕
  only_show_star Boolean @default(false) // 偏好设置-仅展示收藏课程

  created_time DateTime @default(now())
  updated_time DateTime @updatedAt

  class     Class       @relation(fields: [class_id], references: [id])
  account   Account     @relation(fields: [stu_id], references: [user_name])
  Star      Star[]
  Selection Selection[]

  @@map("student")
}

// 教师
model Teacher {
  id         Int     @id @default(autoincrement())
  teacher_id String  @unique // 教工号
  name       String // 教师名称
  account    Account @relation(fields: [teacher_id], references: [user_name])

  @@map("teacher")
}

// 管理员
model Admin {
  id           Int      @id @default(autoincrement())
  user_id      String   @unique
  name         String
  created_time DateTime @default(now()) @map("created_time")
  updated_time DateTime @updatedAt @map("updated_time")
  account      Account  @relation(fields: [user_id], references: [user_name])

  @@map("admin")
}

// 账号表
model Account {
  user_name String @id @unique
  password  String

  adminProfile     Admin?
  teacerProfile    Teacher?
  studentProfile   Student?
  messagesSent     Message[] @relation("sender")
  messagesReceived Message[] @relation("target")

  @@map("account")
}

// 学年学期表
model Term {
  id                  Int      @id @default(autoincrement())
  academic_start      Int // 开始学年
  academic_end        Int // 结束学年
  semester            Int // 学期 1/2
  exhibit_stage_start DateTime // 展示阶段
  exhibit_stage_end   DateTime
  first_stage_start   DateTime
  first_stage_end     DateTime
  second_stage_start  DateTime
  second_stage_end    DateTime
  third_stage_start   DateTime
  third_stage_end     DateTime
  status              Boolean // true-进行中 false-结束
  Course              Course[]

  @@map("term_info")
}

// 课程表
model Course {
  id        Int    @id @default(autoincrement())
  course_id String
  name      String // 课程名称
  link      String // 链接
  week_num  String // 周次
  score     Int // 学分
  hour      Int // 学时
  prop      String // 性质 (网课\线下...)
  domain    String // 课程领域

  type        String // 类型?
  address     String // 授课教室
  course_time String // 授课时间
  target_num  Int // 限选人数

  majorLimit CourseMaojrLimit[] // 专业限制
  stageLimit StageLimit[] // 年级限制

  created_time DateTime @default(now())
  updated_time DateTime @updatedAt

  term_id        Int
  term           Term             @relation(fields: [term_id], references: [id])
  Star           Star[]
  Selection      Selection[]
  StarCount      StarCount[]
  SelectionCount SelectionCount[]

  @@map("course")
}

// 专业限选
model CourseMaojrLimit {
  id        Int    @id @default(autoincrement())
  course_id Int
  course    Course @relation(fields: [course_id], references: [id])
  major_id  Int
  marjor    Major  @relation(fields: [major_id], references: [id])

  @@map("course_major_limit")
}

// 阶段限选
model StageLimit {
  id        Int    @id @default(autoincrement())
  stage     Int // 阶段 0 1 2 3
  grade     Int // 年级 1 2 3 4 
  course_id Int // 课程id
  course    Course @relation(fields: [course_id], references: [id])

  @@map("stage_grade_limit")
}

// 收藏表
model Star {
  id         Int     @id @default(autoincrement())
  course_id  Int
  course     Course  @relation(fields: [course_id], references: [id])
  student_id Int
  student    Student @relation(fields: [student_id], references: [id])

  created_time DateTime @default(now())
  updated_time DateTime @updatedAt

  @@map("star_record")
}

// 收藏计数表
model StarCount {
  course_id Int    @id
  course    Course @relation(fields: [course_id], references: [id])
  num       Int

  @@map("star_count")
}

// 选课情况表
model Selection {
  id         Int     @id @default(autoincrement())
  course_id  Int
  course     Course  @relation(fields: [course_id], references: [id])
  student_id Int
  student    Student @relation(fields: [student_id], references: [id])

  will_num Int
  case     String
  status   Int // 状态, 0-待处理 1-选课成功 2-已拒绝
  stage    Int // 阶段， 1 2 3

  created_time DateTime @default(now())
  updated_time DateTime @updatedAt

  @@map("selection_record")
}

// 选课计数表
model SelectionCount {
  id        Int    @id @default(autoincrement())
  course_id Int
  stage     Int // 阶段， 1 2 3
  status    Int // 状态, 0-待处理 1-选课成功 2-已拒绝
  num       Int // 数量
  course    Course @relation(fields: [course_id], references: [id])

  @@map("selection_count")
}

// 通知表
model Announce {
  id           Int      @id @default(autoincrement())
  title        String
  content      String   @db.Text
  department   String
  click_num    Int      @default(0)
  status       Boolean  @default(true)
  publish_time DateTime @default(now())

  created_time DateTime @default(now())
  updated_time DateTime @updatedAt

  @@map("announce")
}

// 消息表
model Message {
  id             Int     @id @default(autoincrement())
  content        String
  sender_user_id String // 发送人
  target_user_id String // 接收人
  sender         Account @relation(name: "sender", fields: [sender_user_id], references: [user_name])
  target         Account @relation(name: "target", fields: [target_user_id], references: [user_name])
  is_read        Int // 是否已读

  created_time DateTime @default(now())
  updated_time DateTime @updatedAt

  @@map("message")
}
